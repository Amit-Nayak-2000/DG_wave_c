dg_local_storage.cpp:52:	std::unordered_map<int, std::vector<mpi_table>> north;
dg_local_storage.cpp:53:	std::unordered_map<int, std::vector<mpi_table>> south;
dg_local_storage.cpp:54:	std::unordered_map<int, std::vector<mpi_table>> west;
dg_local_storage.cpp:55:	std::unordered_map<int, std::vector<mpi_table>> east;
dg_construct_mpi_boundary.cpp:9:#include "dg_put_into_mpi_table.h"
dg_construct_mpi_boundary.cpp:22:/// Each face is a vector of struct "mpi_table" that contains all the info required. 
dg_construct_mpi_boundary.cpp:61:				Put_in_mpi_table(temp, it_face, hrefinement::south);
dg_construct_mpi_boundary.cpp:102:				Put_in_mpi_table(temp, it_face, hrefinement::north);
dg_construct_mpi_boundary.cpp:142:				Put_in_mpi_table(temp, it_face, hrefinement::west);
dg_construct_mpi_boundary.cpp:182:				Put_in_mpi_table(temp, it_face, hrefinement::east);
dg_put_into_mpi_table.cpp:4:#include "dg_put_into_mpi_table.h"
dg_put_into_mpi_table.cpp:14:/// @param mpi_table The relevent MPI bountary table. 
dg_put_into_mpi_table.cpp:16:void Put_in_mpi_table(Unit* temp, std::vector<Unit::Face>::iterator& facen_it, 
dg_put_into_mpi_table.cpp:17:			std::unordered_map<int, std::vector<mpi_table>>& table){
dg_put_into_mpi_table.cpp:21:		table[facen_it -> rank] = std::vector<mpi_table>();
dg_put_into_mpi_table.cpp:34:					[local_key] (const mpi_table& v) {return v.local_key == local_key;});
dg_load_balancing.cpp:4:#include "dg_mpi_table_construct.h"
dg_message_exchange.cpp:17:void Exchange_solution(std::unordered_map<int, std::vector<mpi_table>>& sender, int face_s,
dg_message_exchange.cpp:18:			std::unordered_map<int, std::vector<mpi_table>>& recver, int face_r, char dir);
dg_message_exchange.cpp:20:void Exchange_flux(std::unordered_map<int, std::vector<mpi_table>>& sender, int face_s, int face_r);
dg_message_exchange.cpp:33:void Exchange_solution(std::unordered_map<int, std::vector<mpi_table>>& sender, int face_s,
dg_message_exchange.cpp:34:			std::unordered_map<int, std::vector<mpi_table>>& recver, int face_r, char dir){
dg_message_exchange.cpp:155:void Exchange_flux(std::unordered_map<int, std::vector<mpi_table>>& sender, int face_s, int face_r){
dg_mpi_table_construct.cpp:1:#include "dg_mpi_table_construct.h"
dg_mpi_table_construct.cpp:13:#include "dg_put_into_mpi_table.h"
dg_mpi_table_construct.cpp:19:void Erase_old_face(std::vector<Unit::Face>::iterator& it_face, std::vector<mpi_table>::iterator& it, 
dg_mpi_table_construct.cpp:22:void Sender_recver(std::unordered_map<int, std::vector<mpi_table>>& south, 
dg_mpi_table_construct.cpp:23:					std::unordered_map<int, std::vector<mpi_table>>& north, int update_dir, 
dg_mpi_table_construct.cpp:26:void Update_mpi_boundaries(std::unordered_map<int, std::vector<mpi_table>>& north, int facen,
dg_mpi_table_construct.cpp:28:				std::unordered_map<int, std::vector<mpi_table>>& south, int faces, 
dg_mpi_table_construct.cpp:31:void Update_hash(std::vector<facen_pack>& recv_info, std::unordered_map<int, std::vector<mpi_table>>& table, 
dg_mpi_table_construct.cpp:35:void Record_length(int my_hlevel, int n_hlevel, int target_rank, std::unordered_map<int, std::vector<mpi_table>>& my_table);
dg_mpi_table_construct.cpp:37:void Construct_mpi_table(std::unordered_map<int, std::vector<mpi_table>>& north, int face_north, 
dg_mpi_table_construct.cpp:39:				std::unordered_map<int, std::vector<mpi_table>>& south, int face_south, 
dg_mpi_table_construct.cpp:57:	Construct_mpi_table(hrefinement::north, 1, hrefinement::neighbours_north,
dg_mpi_table_construct.cpp:61:	Construct_mpi_table(hrefinement::east, 3, hrefinement::neighbours_east,
dg_mpi_table_construct.cpp:90:/// @param mpi_table Relevent direction's MPI table. 
dg_mpi_table_construct.cpp:91:void Record_length(int my_hlevel, int n_hlevel, int target_rank, std::unordered_map<int, std::vector<mpi_table>>& my_table){
dg_mpi_table_construct.cpp:152:void Construct_mpi_table(std::unordered_map<int, std::vector<mpi_table>>& north, int face_north, 
dg_mpi_table_construct.cpp:154:				std::unordered_map<int, std::vector<mpi_table>>& south, int face_south, 
dg_mpi_table_construct.cpp:170:					Put_in_mpi_table(temp, it, south);
dg_mpi_table_construct.cpp:192:					Put_in_mpi_table(temp, it, north);
dg_mpi_table_construct.cpp:221:void Update_mpi_boundaries(std::unordered_map<int, std::vector<mpi_table>>& north, int facen,
dg_mpi_table_construct.cpp:223:				std::unordered_map<int, std::vector<mpi_table>>& south, int faces, 
dg_mpi_table_construct.cpp:239:void Sender_recver(std::unordered_map<int, std::vector<mpi_table>>& south, 
dg_mpi_table_construct.cpp:240:					std::unordered_map<int, std::vector<mpi_table>>& north, int update_dir, 
dg_mpi_table_construct.cpp:316:void Update_hash(std::vector<facen_pack>& recv_info, std::unordered_map<int, std::vector<mpi_table>>& table, 
dg_mpi_table_construct.cpp:361:void Erase_old_face(std::vector<Unit::Face>::iterator& it_face, std::vector<mpi_table>::iterator& it, 
Binary file .dg_put_into_mpi_table.cpp.swp matches
dg_adapt.cpp:3:#include "dg_mpi_table_construct.h"
dg_adapt.cpp:24:	Construct_mpi_table(hrefinement::north, 1, hrefinement::neighbours_north,
dg_adapt.cpp:31:	Construct_mpi_table(hrefinement::east, 3, hrefinement::neighbours_east,
dg_proc_mapping.cpp:26:void Ownership_one_dir(std::unordered_map<int, std::vector<mpi_table>>& mtable);
dg_proc_mapping.cpp:28:void Send_recv_ownership(std::unordered_map<int, std::vector<mpi_table>>& sendo, 
dg_proc_mapping.cpp:29:			std::unordered_map<int, std::vector<mpi_table>>& recvo, int facei);
dg_proc_mapping.cpp:31:void Update_mpib(std::vector<int>& recv_info, std::unordered_map<int, std::vector<mpi_table>>& otable, 
dg_proc_mapping.cpp:36:void Change_face(int num, std::vector<int>& recv_info, std::vector<mpi_table>::iterator& ito, 
dg_proc_mapping.cpp:324:void Ownership_one_dir(std::unordered_map<int, std::vector<mpi_table>>& mtable){
dg_proc_mapping.cpp:385:void Send_recv_ownership(std::unordered_map<int, std::vector<mpi_table>>& sendo, 
dg_proc_mapping.cpp:386:			std::unordered_map<int, std::vector<mpi_table>>& recvo, int facei){
dg_proc_mapping.cpp:456:void Update_mpib(std::vector<int>& recv_info, std::unordered_map<int, std::vector<mpi_table>>& otable, 
dg_proc_mapping.cpp:483:void Change_face(int num, std::vector<int>& recv_info, std::vector<mpi_table>::iterator& ito, 
